import itertools

def total_cost(assignment, cost_matrix):
    total = 0
    for worker, task in assignment:
        total += cost_matrix[worker][task]
    return total

def assignment_problem(cost_matrix):
    num_workers = len(cost_matrix)
    num_tasks = len(cost_matrix[0])
    
    min_cost = float('inf')
    optimal_assignment = None
    
    for permutation in itertools.permutations(range(num_tasks), num_workers):
        assignment = list(enumerate(permutation))
        cost = total_cost(assignment, cost_matrix)
        
        if cost < min_cost:
            min_cost = cost
            optimal_assignment = assignment
    
    return optimal_assignment, min_cost

# Test Cases
# Simple Case
cost_matrix_simple = [[3, 10, 7], [8, 5, 12], [4, 6, 9]]
optimal_assignment_simple, total_cost_simple = assignment_problem(cost_matrix_simple)

# More Complex Case
cost_matrix_complex = [[15, 9, 4], [8, 7, 18], [6, 12, 11]]
optimal_assignment_complex, total_cost_complex = assignment_problem(cost_matrix_complex)

# Output
print("Test Case 1:")
print("Optimal Assignment:", [(f"worker {w+1}", f"task {t+1}") for w, t in optimal_assignment_simple])
print("Total Cost:", total_cost_simple)

print("\nTest Case 2:")
print("Optimal Assignment:", [(f"worker {w+1}", f"task {t+1}") for w, t in optimal_assignment_complex])
print("Total Cost:", total_cost_complex)
